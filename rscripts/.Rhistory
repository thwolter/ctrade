outputCls <- R6Class('Output',
privat = list('dir' = NULL, 'file' = NULL),
public = list(
initialize = function(directory, file) {
private$dir <- directory
private$file <- file},
write = function(array) {write(RJSONIO::toJSON(array), file = private$file)}
)
)
output <- outputCls$new(opt$directory, opt$result)
load("~/Code/ctrade/rscripts/tests/opt.RData")
opt
load("~/Code/ctrade/rscripts/tests/opt.RData")
opt
load("~/Code/ctrade/rscripts/opt.RData")
opt
source('~/Code/ctrade/rscripts/RiskRscript.R')
RapiClass$new(opt)
source('~/Code/ctrade/rscripts/rapi.R')
source('~/Code/ctrade/rscripts/rapi.R')
opt$base
opt
load("~/Code/ctrade/rscripts/opt.RData")
opt$base
#
# Rapi Class definition
#
RapiClass <- R6Class('Rapi',
privat = list(
'base' = NULL,
'result' = NULL,
'directory' = NULL,
'task' = NULL,
'entity' = NULL,
'conf' = NULL,
'period' = NULL,
write = function(array) {write(RJSONIO::toJSON(array), file = private$result)}
#write = function(array) {jsonlite::write_json(as.data.frame(array), private$result)}
),
public = list(
initialize = function(array) {
if (!file.info(array$base)$isdir)
stop(paste("base dirctory doesn't exist: ", array$base))
if (!file.info(array$directory)$isdir)
stop(paste("dirctory doesn't exist: ", array$directory))
if (!file.exists(array$entity))
stop(paste("entity file dosn't exist: ", array$entity))
private$base <- array$base
private$result <- array$result
private$directory <- array$directory
private$task <- array$task
private$entity <- array$entity
private$conf <- array$conf
private$period <- array$period
setwd(private$base)
source('Class/Instrument.R')
source('Class/Stock.R')
source('Class/Portfolio.R')
self$do()
},
do = function() {do.call(private[[private$task]], list())}
)
)
#
# Rapi Class definition
#
RapiClass <- R6Class('Rapi',
privat = list(
'base' = NULL,
'result' = NULL,
'directory' = NULL,
'task' = NULL,
'entity' = NULL,
'conf' = NULL,
'period' = NULL,
write = function(array) {write(RJSONIO::toJSON(array), file = private$result)}
#write = function(array) {jsonlite::write_json(as.data.frame(array), private$result)}
),
public = list(
initialize = function(array) {
if (!file.info(array$base)$isdir)
stop(paste("base dirctory doesn't exist: ", array$base))
if (!file.info(array$directory)$isdir)
stop(paste("dirctory doesn't exist: ", array$directory))
if (!file.exists(array$entity))
stop(paste("entity file dosn't exist: ", array$entity))
private$base <- array$base
private$result <- array$result
private$directory <- array$directory
private$task <- array$task
private$entity <- array$entity
private$conf <- array$conf
private$period <- array$period
setwd(private$base)
source('Class/Instrument.R')
source('Class/Stock.R')
source('Class/Portfolio.R')
self$do()
},
do = function() {do.call(private[[private$task]], list())}
)
)
RapiClass$new(opt)
opt$base
source('~/Code/ctrade/rscripts/tests/test.R')
RapiClass$new(opt)
opt
source('~/Code/ctrade/rscripts/tests/test.R')
RapiClass$new(opt)
source('~/Code/ctrade/rscripts/tests/test.R')
RapiClass$new(opt)
opt$task
RapiClass <- R6Class('Rapi',
privat = list(
'base' = NULL,
'result' = NULL,
'directory' = NULL,
'task' = NULL,
'entity' = NULL,
'conf' = NULL,
'period' = NULL,
write = function(array) {write(RJSONIO::toJSON(array), file = private$result)}
#write = function(array) {jsonlite::write_json(as.data.frame(array), private$result)}
),
public = list(
initialize = function(array, do = TRUE) {
if (!file.info(array$base)$isdir)
stop(paste("base dirctory doesn't exist: ", array$base))
if (!file.info(array$directory)$isdir)
stop(paste("dirctory doesn't exist: ", array$directory))
if (!file.exists(array$entity))
stop(paste("entity file dosn't exist: ", array$entity))
private$base <- array$base
private$result <- array$result
private$directory <- array$directory
private$task <- array$task
private$entity <- array$entity
private$conf <- array$conf
private$period <- array$period
setwd(private$base)
source('Class/Instrument.R')
source('Class/Stock.R')
source('Class/Portfolio.R')
if (do) self$do()
},
do = function() {do.call(private[[private$task]], list())}
)
)
RapiClass$new(opt, FALSE)
rapi$do
source('~/Code/ctrade/rscripts/tests/test.R')
rapi$do
rapi$do()
rapi$RapiClass <- R6Class('Rapi',
privat = list(
'base' = NULL,
'result' = NULL,
'directory' = NULL,
'task' = NULL,
'entity' = NULL,
'conf' = NULL,
'period' = NULL,
write = function(array) {write(RJSONIO::toJSON(array), file = private$result)}
#write = function(array) {jsonlite::write_json(as.data.frame(array), private$result)}
),
public = list(
initialize = function(array, do = TRUE) {
if (!file.info(array$base)$isdir)
stop(paste("base dirctory doesn't exist: ", array$base))
if (!file.info(array$directory)$isdir)
stop(paste("dirctory doesn't exist: ", array$directory))
if (!file.exists(array$entity))
stop(paste("entity file dosn't exist: ", array$entity))
private$base <- array$base
private$result <- array$result
private$directory <- array$directory
private$task <- array$task
private$entity <- array$entity
private$conf <- array$conf
private$period <- array$period
setwd(private$base)
source('Class/Instrument.R')
source('Class/Stock.R')
source('Class/Portfolio.R')
if (do) self$do()
},
do = function() {do.call(private[[private$task]], list())}
)
)
RapiClass <- R6Class('Rapi',
privat = list(
'base' = NULL,
'result' = NULL,
'directory' = NULL,
'task' = NULL,
'entity' = NULL,
'conf' = NULL,
'period' = NULL,
write = function(array) {write(RJSONIO::toJSON(array), file = private$result)}
#write = function(array) {jsonlite::write_json(as.data.frame(array), private$result)}
),
public = list(
initialize = function(array, do = TRUE) {
if (!file.info(array$base)$isdir)
stop(paste("base dirctory doesn't exist: ", array$base))
if (!file.info(array$directory)$isdir)
stop(paste("dirctory doesn't exist: ", array$directory))
if (!file.exists(array$entity))
stop(paste("entity file dosn't exist: ", array$entity))
private$base <- array$base
private$result <- array$result
private$directory <- array$directory
private$task <- array$task
private$entity <- array$entity
private$conf <- array$conf
private$period <- array$period
setwd(private$base)
source('Class/Instrument.R')
source('Class/Stock.R')
source('Class/Portfolio.R')
if (do) self$do()
},
do = function() {do.call(private[[private$task]], list())}
)
)
RapiClass <- R6Class('Rapi',
privat = list(
'base' = NULL,
'result' = NULL,
'directory' = NULL,
'task' = NULL,
'entity' = NULL,
'conf' = NULL,
'period' = NULL,
write = function(array) {write(RJSONIO::toJSON(array), file = private$result)}
#write = function(array) {jsonlite::write_json(as.data.frame(array), private$result)}
),
public = list(
initialize = function(array, do = TRUE) {
if (!file.info(array$base)$isdir)
stop(paste("base dirctory doesn't exist: ", array$base))
if (!file.info(array$directory)$isdir)
stop(paste("dirctory doesn't exist: ", array$directory))
if (!file.exists(array$entity))
stop(paste("entity file dosn't exist: ", array$entity))
private$base <- array$base
private$result <- array$result
private$directory <- array$directory
private$task <- array$task
private$entity <- array$entity
private$conf <- array$conf
private$period <- array$period
setwd(private$base)
source('Class/Instrument.R')
source('Class/Stock.R')
source('Class/Portfolio.R')
if (do) self$do()
},
do = function() {do.call(private[[private$task]], list())}
)
)
rapi <- RapiClass$new(opt, FALSE)
rapi$valueHistory
rapi$valueHistory()
source('~/Code/ctrade/rscripts/tests/test.R')
rapi
rapi$do
rapi$do()
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
rapi$do()
private[[private$task]]
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
rapi$do()
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
toJSON(rap$valueHistory(10))
toJSON(rapi$valueHistory(10))
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
toJSON(rapi$valueHistory(10))
toJSON(rapi$valueHistory())
rapi$valueHistory()
source('~/Code/ctrade/rscripts/tests/test.R')
rapi$valueHistory()
dat <- rapi$valueHistory()
toJson(dat)
toJSON(dat)
toJSON(dat)
?toJSON
hasArg
hasArg() <- methods::hasArg()
hasArg <- methods::hasArg
as.data.frame(dat)
str(as.data.frame(dat))
toJSON(as.data.frame(dat))
fromJSON(toJSON(as.data.frame(dat)))
toJSON(as.matrix(dat))
toJSON(as.data.frame(dat), Date="ISO8601")
index(dat)
toJSON(data.frame(Date=index(dat), Value=as.vector(dat)))
write_json(data.frame(Date=index(dat), Value=as.vector(dat)), "output.json")
str(dat)
write_json(data.frame(Date=xts.index(dat), Value=as.vector(dat)), "output.json")
write_json(data.frame(Date=xts.zoo::index(dat), Value=as.vector(dat)), "output.json")
write_json(data.frame(Date=zoo::index(dat), Value=as.vector(dat)), "output.json")
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/testRapiClass.R')
source('~/Code/ctrade/rscripts/tests/testRapiClass.R')
rapi
rapi$do()
rapi$do()
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
class(dat)
class(dat) == 'xts'
any(class(dat) == 'xts')
source('~/Code/ctrade/rscripts/tests/testRapiClass.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
?switch
source('~/Code/ctrade/rscripts/tests/test.R')
dat
xts.merge
merge.xts(dat, dat)
dat2 <- merge.xts(dat, dat)
as.data.frame(dat2)
data.frame(Date=index(dat), Value=as.vector(dat))
cbind(zoo::index(dat2), as.data.frame(dat2))
newdat <- cbind(zoo::index(dat2), as.data.frame(dat2))
index(newdat)
row.names(newdat)
row.names(newdat) <- index(newdat)
newdat
colnames(newdat)
colnames(newdat)[1] <- "Date"
newdat
source('~/Code/ctrade/rscripts/tests/test.R')
foo <- function(x, y, z) x+y+z
args(foo)
?args
formals(foo)
str(formals(foo))
as.list(formals(foo))
unclass(formals(foo))
source('~/Code/ctrade/rscripts/RiskRscript.R')
source('~/Code/ctrade/rscripts/tests/test.R')
foo
formals(foo)
private$period
lapply(formals(foo), function(arg) {private[[arg]]})
lapply(formals(foo), function(arg) arg)
formals(foo)[[1]]
formals(foo)[1]
?formals
names(formals(foo))
lapply(names(formals(foo)), function(arg) {private[[arg]]})
args <- lapply(names(formals(foo)), function(arg) {private[[arg]]})
names(args <- names(formals(foo)))
args <- names(formals(foo))
args
argslist <- lapply(args, function(arg) {private[[arg]]})
argslist
names(arglist) <- args
names(argslist) <- args
argslist
source('~/Code/ctrade/rscripts/tests/test.R')
args
foo
call(foo, args)
call("foo", args)
foo
self[[private$task]]
call(self[[private$task]], args)
do.call(self[[private$task]], args)
do.call(foo, args)
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
rapi$xts2df(dat)
rapi$xts2df
rapi
source('~/Code/ctrade/rscripts/Class/Portfolio.R')
source('~/Code/ctrade/rscripts/tests/test.R')
rapi
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
pf$summary(10)
source('~/Code/ctrade/rscripts/tests/test.R')
pf
rapi$summary(60)
rapi$summary(60, 0.95)
source('~/Code/ctrade/rscripts/RiskRscript.R')
source('~/Code/ctrade/rscripts/rapi.R')
source('~/Code/ctrade/rscripts/tests/test.R')
valueHist
result = list(output$contribution, Portfolio = output$MVaR, valueHist = valueHist)
result
result = list(risk = c(output$contribution, Portfolio = output$MVaR), valueHist = valueHist)
result
source('~/Code/ctrade/rscripts/tests/test.R')
foo <- self[[private$task]]
foo
foo <- self[['hallo']]
foo
?stop
stop("no function with name '", private$task, "' defined")
stop("no function for task '", private$task, "' defined (must be equaly named)")
stop("no function for task '", private$task,
"' defined (must have name '", private$task, "')")
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/RiskRscript.R')
source('~/Code/ctrade/rscripts/RiskRscript.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/testRapiClass.R')
source('~/Code/ctrade/rscripts/tests/testRapiClass.R')
source('~/Code/ctrade/rscripts/tests/test.R')
opt
source('~/Code/ctrade/rscripts/tests/test.R')
result
private$write(result)
return(result)
opt
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
private
private$write
private$result
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
toJSON(result)
risk = c(output$contribution, Portfolio = output$MVaR)
risk
as.data.frame(risk)
result = list(risk = as.data.frame(c(output$contribution, Portfolio = output$MVaR)), history = valueHist)
toJSON(result)
row.names(col)
row.names(risk)
names(risk)
output$contribution
names(output$contribution)
as.vector(output$contribution)
vec2df = function(data)
{
data.frame(Name = names(data), Value = as.vector(data))
}
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
c(1.2,3)
is.vector(c(1,2,3))
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
traceback
traceback()
source('~/Code/ctrade/rscripts/tests/test.R')
self$df
self
source('~/Code/ctrade/rscripts/tests/test.R')
result
valueHist
self$df(valueHist)
source('~/Code/ctrade/rscripts/rapi.R')
source('~/Code/ctrade/rscripts/tests/test.R')
result
is.vector(ouput$MVaR)
is.vector(output$MVaR)
is.atomic(output$MVaR)
data.frame(Value = output$MVaR)
source('~/Code/ctrade/rscripts/tests/test.R')
result
toJSON(result)
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
substiute(data)
substitute(data)
(!is.data.frame(data or !is.list(data)))
(!is.data.frame(data) or !is.list(data))
(is.data.frame(data) or is.list(data))
is.data.frame(data) or is.list(data)
is.data.frame(data) | is.list(data)
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
source('~/Code/ctrade/rscripts/tests/test.R')
pf
pf$returns()
mean(pf$returns())
?mean
colMeans(pf$retuns())
colMeans(pf$returns())
colMeans(pf$returns()) %*% pf$delta()
colMeans(pf$returns()) * pf$delta()
sum(colMeans(pf$returns()) * pf$delta())
pf$value()
Risk <- PerformanceAnalytics::VaR(
R = pf$returns(),
p = conf,
weights = pf$delta(),
portfolio_method = 'component'
)
